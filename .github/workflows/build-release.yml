name: generate-releases

on:
  #~ # The following workflow_dispatch is as in prepare-release.yml, trying to see in gha...
  #~ workflow_dispatch:
    #~ inputs:
      #~ version:
        #~ description: 'New version to be released'
        #~ required: true
      #~ branch:
        #~ description: 'Release branch'
        #~ required: true
  workflow_dispatch:
    inputs:
      overwrite_if_needed:
        description: 'true/false, overwrite any previously same-named entity'
        required: false
        default: false
      is_prerelease:
        description: 'true/false, specify if asset is pre-release status'
        required: true #false
        default: true
  push:
    tags:
      - '*'
    branches:
      - dev
      - release-*
      - build-*
      - refs/tags/*
      #~ - refs/heads/*
      #- dlh/ch10040-azr-osx-lnxto-ga
  pull_request:
    branches:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string

env:
  SUDO: 'sudo'

jobs:
  build-release-macos:
    # if tag or 'dev' or 'build-*'
    #if: ${{ startsWith( github.ref, "refs/tags")==true || github.ref_name == 'dev' || startsWith(github.ref_name, "build-")==true }}
    if: true
    runs-on: ${{ matrix.os }}
    env:
      TILEDB_S3: ON
      TILEDB_AZURE: ON
      TILEDB_GCS: ON
      TILEDB_HDFS: ON
      TILEDB_STATIC: OFF
      TILEDB_SERIALIZATION: ON
      TILEDB_FORCE_BUILD_DEPS: ON
      MACOSX_DEPLOYMENT_TARGET: 10.14
      SUDO: 'sudo'
    strategy:
      matrix:
        os: [macos-10.15]
        environ: [x86_64, arm64]
        include:
          - environ: x86_64
            v_TILEDB_AZURE: ON
            v_TILEDB_SERIALIZATION: ON
            v_CXX: clang++
            v_ARTIFACT_OS: macOS
            v_ARTIFACT_ARCH: 'x86_64'
          - environ: arm64
            v_CXX: clang++
            v_ARTIFACT_OS: 'macos'
            v_ARTIFACT_ARCH: 'arm64'
            v_TILEDB_GCS: OFF
            v_TILEDB_WERROR: OFF
            v_CMAKE_OSX_ARCHITECTURES: "arm64"
            v_MACOSX_DEPLOYMENT_TARGET: 11

    steps:
      - name: set env vars
        shell: bash
        env:
          CXX: ${{ matrix.v_CXX }}
          ARTIFACT_OS: ${{ matrix.v_ARTIFACT_OS }}
          ARTIFACT_ARCH: ${{ matrix.v_ARTIFACT_ARCH }}
          TILEDB_GCS: ${{ matrix.v_TILEDB_GCS }}
          TILEDB_WERROR: ${{ matrix.v_TILEDB_WERROR }}
          CMAKE_OSX_ARCHITECTUR: ${{ matrix.v_CMAKE_OSX_ARCHITECTURES }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.v_MACOSX_DEPLOYMENT_TARGET }}
        run: |
          echo "CXX=${CXX}" >> "$GITHUB_ENV"
          echo "ARTIFACT_OS=${ARTIFACT_OS}" >> "$GITHUB_ENV"
          echo "ARTIFACT_ARCH=${ARTIFACT_ARCH}" >> "$GITHUB_ENV"
          echo "TILEDB_GCS=${TILEDB_GCS}" >> "$GITHUB_ENV"
          echo "TILEDB_WERROR=${TILEDB_WERROR}" >> "$GITHUB_ENV"
          echo "CMAKE_OSX_ARCHITECTUR=${CMAKE_OSX_ARCHITECTUR}" >> "$GITHUB_ENV"
          echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> "$GITHUB_ENV"
          #some dev diagnostics
          echo "github.ref is '${{github.ref}}'"
          echo "github.ref_name is '${{github.ref_name}}'"

      - name: toplevel show environ
        shell: bash
        run: |
          set -x
          printenv
          
      - uses: actions/checkout@v2

      - uses: ./.github/actions/mac-release

      #~ - name: 'upload-release-source-asset'
        #~ #uses: actions/upload-files-to-a-github-release
        #~ uses: svenstaro/upload-release-action@2.2.1
        #~ #if tag
        #~ if: ${{ startsWith( github.ref, 'refs/tags') }}
        #~ #if: true #false
        #~ with:
          #~ # required items
          #~ repo_token: ${{ secrets.GITHUB_TOKEN }}
          #~ file: ${{ env.TDB_SOURCE_ARCHIVE_PATH }}
          #~ tag: ${{ github.ref }}
          #~ # optional items
          #~ #asset_name:
          #~ #file_glob:
          #~ overwrite: ${{ github.event.inputs.overwrite_if_needed }}
          #~ prerelease: ${{ github.event.inputs.is_prerelease }}
          #~ #release_name: # defaults to tag name
          #~ #body:
          #~ #repo_name:
          
      - name: 'upload-release-binary-asset'
        #uses: actions/upload-files-to-a-github-release
        uses: svenstaro/upload-release-action@2.2.1
        #if tag
        if: ${{ startsWith( github.ref, 'refs/tags') }}
        #if: true #false
        with:
          # required items
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.TDB_BINARY_ARCHIVE_PATH }}
          tag: ${{ github.ref }}
          # optional items
          #asset_name:
          #file_glob:
          overwrite: ${{ github.event.inputs.overwrite_if_needed }}
          prerelease: ${{ github.event.inputs.is_prerelease }}
          #release_name: # defaults to tag name
          #body:
          #repo_name:

  build-release-manylinux:
    # if tag or 'dev' or 'build-*'
    if: true
    runs-on: ${{ matrix.os }}
    env:
      CXX: g++
      CFLAGS: "-lrt"
      CXXFLAGS: "-lrt"
      ARTIFACT_OS: 'linux'
      ARTIFACT_ARCH: 'x86_64'
      SUDO: ''
    strategy:
      matrix:
        os: [ubuntu-20.04]
        environ: [standard, noavx2]
        include:
          - environ: standard
            v_CXX: g++
            v_CFLAGS: "-lrt"
            v_CXXFLAGS: "-lrt"
            v_ARTIFACT_OS: 'linux'
            v_ARTIFACT_ARCH: "x86_64"
            v_TILEDB_AVX2: ON
            v_SUDO: ''
          - environ: noavx2
            v_CXX: g++
            v_CFLAGS: "-lrt"
            v_CXXFLAGS: "-lrt"
            v_ARTIFACT_OS: 'linux'
            v_ARTIFACT_ARCH: "x86_64-noavx2"
            v_TILEDB_AVX2: OFF
            v_SUDO: ''
    steps:
      - name: set env vars
        shell: bash
        env:
          CXX: ${{ matrix.v_CXX }}
          CFLAGS: ${{ matrix.v_CFLAGS }}
          CXXFLAGS: ${{ matrix.v_CXXFLAGS }}
          ARTIFACT_OS: ${{ matrix.v_ARTIFACT_OS }}
          ARTIFACT_ARCH: ${{ matrix.v_ARTIFACT_ARCH }}
          TILEDB_AVX2: ${{ matrix.v_TILEDB_AVX2 }}
          SUDO: ${{ matrix.v_SUDO }}
        run: |
          echo "CXX=${CXX}" >> "$GITHUB_ENV"
          echo "CFLAGS=${CFLAGS}" >> "$GITHUB_ENV"
          echo "CXXFLAGS=${CXXFLAGS}" >> "$GITHUB_ENV"
          echo "ARTIFACT_OS=${ARTIFACT_OS}" >> "$GITHUB_ENV"
          echo "ARTIFACT_ARCH=${ARTIFACT_ARCH}" >> "$GITHUB_ENV"
          echo "TILEDB_AVX2=${TILEDB_AVX2}" >> "$GITHUB_ENV"
          echo "SUDO=${SUDO}" >> "$GITHUB_ENV"
          #some dev diagnostics
          echo "github.ref is '${{github.ref}}'"
          echo "github.ref_name is '${{github.ref_name}}'"

      - uses: actions/checkout@v2

      - uses: ./.github/actions/manylinux-release

      #~ - name: 'upload-release-source-asset'
        #~ #uses: actions/upload-files-to-a-github-release
        #~ #TBD: consider what to do with 'insecureness' of 'published' action outside of 'safe' environment...?
        #~ uses: svenstaro/upload-release-action@2.2.1
        #~ #if tag and is avx2 build
        #~ if: ${{ startsWith( github.ref, 'refs/tags') && matrix.v_TILEDB_AVX2 == 'ON' }}
        #~ #if: true #false
        #~ with:
          #~ # required items
          #~ repo_token: ${{ secrets.GITHUB_TOKEN }}
          #~ file: ${{ env.TDB_SOURCE_ARCHIVE_PATH }}
          #~ tag: ${{ github.ref }}
          #~ # optional items
          #~ #asset_name:
          #~ #file_glob:
          #~ overwrite: ${{ github.event.inputs.overwrite_if_needed }}
          #~ prerelease: ${{ github.event.inputs.is_prerelease }}
          #~ #release_name: # defaults to tag name
          #~ #body:
          #~ #repo_name:
          
      - name: 'upload-release-binary-asset'
        #uses: actions/upload-files-to-a-github-release
        uses: svenstaro/upload-release-action@2.2.1
        #if tag
        if: ${{ startsWith( github.ref, 'refs/tags') }}
        #if: true #false
        with:
          # required items
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.TDB_BINARY_ARCHIVE_PATH }}
          tag: ${{ github.ref }}
          # optional items
          #asset_name:
          #file_glob:
          overwrite: ${{ github.event.inputs.overwrite_if_needed }}
          prerelease: ${{ github.event.inputs.is_prerelease }}
          #release_name: # defaults to tag name
          #body:
          #repo_name:

  build-release-windows:
    # if tag or 'dev' or 'build-*'
    if: true
    runs-on: ${{ matrix.os }}
    env:
      TILEDB_HOME: ${{ github.workspace }}
      TILEDB_GA_IMAGE_NAME: ${{ matrix.os }}
      TILEDB_S3: ${{ matrix.TILEDB_S3 }}
      TILEDB_AZURE: ${{ matrix.TILEDB_AZURE }} #azure }}
      TILEDB_SERIALIZATION: ${{ matrix.TILEDB_SERIALIZATION }} #serialization }}
      TILEDB_ARROW_TESTS: ${{ matrix.TILEDB_ARROW_TESTS }}
      ARTIFACT_OS: 'windows'
      ARTIFACT_ARCH: 'x86_64'
      SUDO: ''
    strategy:
      matrix:
        os: [windows-2019]
        environ: [standard]
        include:
          - environ: standard
            v_ARTIFACT_OS: 'linux'
            v_ARTIFACT_ARCH: "x86_64"
            v_TILEDB_AVX2: ON
            v_SUDO: ''
    steps:
      - name: 'tiledb env prep'
        run: |
          $env:BUILD_BUILDDIRECTORY = $env:GITHUB_WORKSPACE.replace("TileDB\TileDB","tdbbd") # 't'ile'db' 'b'uild 'd'ir
          $env:BUILD_SOURCESDIRECTORY = $env:GITHUB_WORKSPACE

          Write-Host "GITHUB_WORKSPACE is '$env:GITHUB_WORKSPACE'"
          Write-Host "BUILD_BUILDDIRECTORY is '$env:BUILD_BUILDDIRECTORY'"
          Write-Host "BUILD_SOURCESDIRECTORY is '$env:BUILD_SOURCESDIRECTORY'"
          Write-Host "GITHUB_ENV is $env:GITHUB_ENV"

          mkdir $env:BUILD_BUILDDIRECTORY

          write-host "BUILD_BUILDDIRECTORY=$env:BUILD_BUILDDIRECTORY" *>> $env:GITHUB_ENV
          write-host "BUILD_SOURCESDIRECTORY=$env:BUILD_SOURCESDIRECTORY" *>> $env:GITHUB_ENV

      - name: 'Print env'
        shell: cmd
        run: |
          set

      - name: 'proxy localappdata'
        shell: pwsh
        run: |
          #so, apparently env context is *NOT* populated from runner machine environ...
          #https://github.com/actions/runner/issues/740
          #i.e. for us ${{ env.LOCALAPPDATA }} does not work directly (wanted in artifact upload path)
          #and considered to be doc'd as so, tho the ref'd doc doesn't really seem to outline that, but behaviour fails...
          #https://github.com/actions/runner/blob/main/docs/adrs/0278-env-context.md#dont-populate-the-env-context-with-environment-variables-from-runner-machine
          #but, it seems *we* can populate our own var from our actions, and access it in file upload...
          echo TDBLOCALAPPDATA=$env:LOCALAPPDATA >> "$env:GITHUB_ENV"

      - name: Prepare git
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v2

      - name: windows build
        uses: ./.github/actions/windows-release

      - name: show windows env and file assets
        shell: bash
        run: |
          set -x
          pwd
          echo "TDB_SOURCE_ARCHIVE_PATH is ${{ env.TDB_SOURCE_ARCHIVE_PATH }}"
          echo "B - TDB_SOURCE_ARCHIVE_PATH is ${TDB_SOURCE_ARCHIVE_PATH}"
          echo "TDB_BINARY_ARCHIVE_PATH is ${{ env.TDB_BINARY_ARCHIVE_PATH }}"
          echo "B - TDB_BINARY_ARCHIVE_PATH is ${TDB_BINARY_ARCHIVE_PATH}"
          echo "TDB_SOURCE_ARCHIVE_NAME is ${{ env.TDB_SOURCE_ARCHIVE_NAME }}"
          echo "B - TDB_SOURCE_ARCHIVE_NAME is ${TDB_SOURCE_ARCHIVE_NAME}"
          echo "TDB_BINARY_ARCHIVE_NAME is ${{ env.TDB_BINARY_ARCHIVE_NAME }}"
          echo "B - TDB_BINARY_ARCHIVE_NAME is ${TDB_BINARY_ARCHIVE_NAME}"
          ls -l $GITHUB_WORKSPACE/..


      #~ - name: 'upload-release-source-asset'
        #~ #uses: actions/upload-files-to-a-github-release
        #~ uses: svenstaro/upload-release-action@2.2.1
        #~ if: ${{ startsWith( github.ref, 'refs/tags') }}
        #~ #if: true #false
        #~ with:
          #~ # required items
          #~ repo_token: ${{ secrets.GITHUB_TOKEN }}
          #~ file: ${{ env.TDB_SOURCE_ARCHIVE_PATH }}
          #~ tag: ${{ github.ref }}
          #~ # optional items
          #~ #asset_name:
          #~ #file_glob:
          #~ overwrite: ${{ github.event.inputs.overwrite_if_needed }}
          #~ prerelease: ${{ github.event.inputs.is_prerelease }}
          #~ #release_name: # defaults to tag name
          #~ #body:
          #~ #repo_name:
          
      - name: 'upload-release-binary-asset'
        #uses: actions/upload-files-to-a-github-release
        uses: svenstaro/upload-release-action@2.2.1
        if: ${{ startsWith( github.ref, 'refs/tags') }}
        #if: true #false
        with:
          # required items
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.TDB_BINARY_ARCHIVE_PATH }}
          tag: ${{ github.ref }}
          # optional items
          #asset_name:
          #file_glob:
          overwrite: ${{ github.event.inputs.overwrite_if_needed }}
          prerelease: ${{ github.event.inputs.is_prerelease }}
          #release_name: # defaults to tag name
          #body:
          #repo_name:

